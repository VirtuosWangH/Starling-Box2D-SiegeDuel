package editor.modes{		import flash.display.Sprite;		import editor.commonData.DrawingType;	import editor.commonData.Restrictions;	import editor.drawingObject.BaseObject;	import editor.drawingObject.CircleObject;	import editor.events.CommonEvent;	import editor.ui.NativeSprite;
		public class CircleMode extends BaseMode {				private var _circle:BaseObject;				public function CircleMode(){					}				override public function start(main:NativeSprite):void{			 			  _main = main;			 _circle =  new CircleObject();			 if (Restrictions._isGridSnapping){				 _circle.x = int(_main.mouseX / 10) * 10;				 _circle.y = int(_main.mouseY / 10) * 10;			 }else{				 _circle.x = _main.mouseX;				 _circle.y = _main.mouseY;			 }			 _main.addChild(_circle);			 _circle.dispatchEvent(new CommonEvent(CommonEvent.START_CREATE,true));		}				override public function run():void{			 _circle.graphics.clear();			 _circle.graphics.lineStyle(0, 0x000000);			 _circle.graphics.beginFill(0xCCCCCC);			 var dx:Number =  _main.mouseX - _circle.x;			 var dy:Number =  _main.mouseY - _circle.y;			 var rad:Number = Math.sqrt(dx * dx + dy * dy);			 if (Restrictions._isGridSnapping){				 rad = int(rad / 10) * 10;			 }			 _circle.graphics.drawCircle(0,0, rad);		}				override public function end():void{			 if (_circle.width == 0){				_circle.parent.removeChild(_circle);				return;			}		}				override public function toString():String{			return DrawingType.CIRCLE;		}		 	}}/*_box.addEventListener(MouseEvent.MOUSE_DOWN, onDown);		}		private function onDown(evt:MouseEvent):void{			if (_app.mode == "Default"){			 // check that mode is not box				 evt.currentTarget.startDrag();				 evt.currentTarget.parent.addChild(evt.currentTarget);			}		}		*/