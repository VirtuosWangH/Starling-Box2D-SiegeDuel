package editor.drawingObject{		import flash.geom.Point;	import editor.utils.Calculator;
		public class JointObject extends BaseObject {		 		public function JointObject(type:String=""){			 super(type);		}		     	override public function get objectDef():String{				var bodyA:String;				var bodyB:String;				var pntA:Point = localToGlobal(shapeData.pointA)				var pntB:Point = localToGlobal(shapeData.pointB);				if (parent){					for (var i:int = 0; i<parent.numChildren; i++){						var e:* = parent.getChildAt(i);						if (e is BaseObject){							if (!(e is JointObject)){								if (e.hitTestPoint(pntA.x, pntA.y, true)){									  bodyA = e.name +".body";									 // trace("body A : " + bodyA);								}else								if (e.hitTestPoint(pntB.x, pntB.y, true)){									  bodyB = e.name +".body";									 // trace("body B : " + bodyB);								}								 							}						}					}									}				//vecA:"new b2Vec2(" + Calc.b2dSize(pntA.x) + ", "+ Calc.b2dSize(pntA.y)+ ")", vecB:"new b2Vec2(" + Calc.b2dSize(pntB.x) + ", "+ Calc.b2dSize(pntB.y)+ ")"				data = {a:bodyA, b:bodyB, x1:Calculator.b2dSize(pntA.x), y1:Calculator.b2dSize(pntA.y), x2:Calculator.b2dSize(pntB.x), y2:Calculator.b2dSize(pntB.y)};				return  preCommandStr() + "sim.addJoint({a:" + data.a + ", b:" + data.b + ", x1:" + data.x1 + ", y1:"+ data.y1+", " + "x2:" + data.x2 + ", y2:"+ data.y2+"});";		}				 		private function parseb2Vec2(str:String):Array {			var s:* =str;			s=s.match(/\(.*\)/);			s=s[0].replace(/\(|\)/g,"");			s=s.split(",");			for (var i:int = 0; i<s.length; i++) {				s[i]=Number(s[i]);			}			return s as Array;		}		override public function createFromObject(nm:String, obj:Object):void{			if (nm != ""){				name = nm;			}						for (var i:int in obj){				trace(i, obj[i]);			}						var pntA:Array = [Calculator.flaSize(obj.x1), Calculator.flaSize(obj.y1)];			var pntB:Array = [Calculator.flaSize(obj.x2), Calculator.flaSize(obj.y2)];						x = pntA[0];			y = pntA[1];						pntB[0] -= pntA[0];			pntB[1] -= pntA[1];						graphics.clear();			 graphics.lineStyle(3, 0xFFCC00);			 			 			 graphics.lineTo(pntB[0], pntB[1]);			 			 shapeData.pointA = new Point(0,0);			 shapeData.pointB = new Point(pntB[0], pntB[1]);					}	}}