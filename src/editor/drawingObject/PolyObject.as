package editor.drawingObject{		import editor.utils.Calculator;
		public class PolyObject extends BaseObject {		 		public function PolyObject(type:String=""){			 super(type);		}		     	override public function get objectDef():String{			var copy:Array  = [];			for (var i:int = 0; i<shapeData.verts.length; i++){				copy[i] = shapeData.verts[i].concat();			}			data = {x:Calculator.b2dSize(x), y:Calculator.b2dSize(y), 					verts:format2D(Calculator.b2dSize2DArray(copy)), 					density:shapeData.density,  angle: Calculator.bAngle(rotation)};			return  preCommandStr() + "sim.addPoly({x:" + data.x + ", y:" + data.y 					+ ", verts:" + data.verts + ", angle: "+ data.angle + ", density:"+ data.density+"});";		}				override public function createFromObject(nm:String, obj:Object):void{			if (nm != ""){				name = nm;			}			x = Calculator.flaSize(obj.x);			y = Calculator.flaSize(obj.y);						var points:Array = shapeData.verts = Calculator.flaSize2DArray(obj.verts);						 for (var j:int = 0; j<points.length; j++){			   graphics.lineStyle(0, 0x000000);			   graphics.beginFill(0xCCCCCC);			   graphics.moveTo(points[j][0], points[j][1]);				 for(var i:int = 2; i<points[j].length; i+=2){					  graphics.lineTo(points[j][i], points[j][i + 1]);				 }			     graphics.endFill();			 }			 			 rotation = Calculator.fAngle(obj.angle);			 shapeData.density = obj.density;		}	}}