package editor.parsers{		public class StringToObject {             //			// str like "{x:10.33, y:2, radius:0.33, density:1}"			//			public static function parse(str:String, debug:Boolean=false):Object{				var cmds:Array = new Array();				var stack:String = "";				// skip first {				str = str.replace(/^\s+\{|^\{/, "");				var obj:Object = new Object();				for (var i:int = 0; i<=str.length; i++){					var char:String = str.charAt(i);					if (char == ":"){						cmds.push(["name:", stack])						stack = "";						char = "";					}else if (char == "," || char == "}"){						if (stack != ""){						  cmds.push(["value:", stack]);						}						stack = "";						char = "";					}					if (char == "{"){						cmds.push(["object:", stack]);						for (var j:int = i; j < str.length; j++){							char = str.charAt(j);							stack+=char;							i++;							if (char == "}"){								 break;							}						}						cmds.push(["value:", stack]);						stack = "";						char = "";					}					if (char == "["){						cmds.push(["array:", stack]);						stack = "";						char = "";					}else if (char == "]"){						if (stack != ""){							cmds.push(["value:", stack]);						}						stack = "";						char = "";						i++;					}					stack += char;				}				// show some debug info				if (debug){					for (i = 0; i<cmds.length; i++) trace(cmds[i]);				}				// build the object				var prop:String;				var arrayMode:Boolean = false;				var nest:int = 0;				for (i = 0; i<cmds.length; i++){					if (cmds[i][0] == "name:"){						prop = cmds[i][1].replace(/\s/g, "");						arrayMode = false;						nest = 0;					}else if (cmds[i][0] == "value:"){						if (arrayMode == false){						  obj[prop] = valueType(cmds[i][1]);						}else{							// populate array							if (nest == 1){							  obj[prop].push(valueType(cmds[i][1]))							}else{							  obj[prop][nest - 2].push(valueType(cmds[i][1]))							}						}					}else if (cmds[i][0] == "object:"){						i++;						obj[prop] = parse(cmds[i][1]);					}else if (cmds[i][0] == "array:"){						arrayMode = true;						nest++;						if (nest == 1){							// create array							obj[prop] = new Array()						}else{							// nested array							obj[prop].push(new Array());						}					}				}				return obj;			}			 			private static function valueType(val:*):* {				if (isNaN(Number(val))) {					   // remove leading and trailing white					   // remove "" around strings					   val = val.replace(/^\s+|\s+$/g,"").replace(/^\"|\"$/g,"");					   //  see if it's a boolean					   if (val == "true"){						   val = true;					   }else if (val == "false"){						   val = false					   }				} else {					val = Number(val);				}				return val;			}	}}